cities <- cities[,-1] #remove first column
cities <- as.matrix(cities) #convert to matrix
cities # print matrix
cities_mat <- cities # leave original matrix intact
cities_mat[cities <= 1500] <- 1
cities_mat[cities >= 1500] <- 0
diag(cities_mat) <- 0 # we do not have to fly within each of cities :)
cities_mat # check out the adjacency matrix
cities_mat[cities >= 2000] <- 0
cities_mat <- cities # leave original matrix intact
cities_mat[cities <= 2000] <- 1
cities_mat[cities >= 2000] <- 0
diag(cities_mat) <- 0 # we do not have to fly within each of cities :)
cities_mat # check out the adjacency matrix
library(igraph) # load package
# make sure to use the 2000 mile distance cutoff
cities_graph2 <- graph.adjacency(cities_mat, mode = "undirected")
plot.igraph(cities_graph2)
cities_graph2 <- graph.adjacency(cities_mat, mode = "undirected")
plot.igraph(cities_graph2)
sum(cities_mat)/2 # divide by 2 because the matrix has 2 values for each edge
cities_mat <- cities # leave original matrix intact
cities_mat[cities <= 1500] <- 1
cities_mat[cities >= 1500] <- 0
diag(cities_mat) <- 0 # we do not have to fly within each of cities :)
cities_mat # check out the adjacency matrix
cities_graph2 <- graph.adjacency(cities_mat, mode = "undirected")
plot.igraph(cities_graph2)
sum(cities_mat)/2 # divide by 2 because the matrix has 2 values for each edge
cities_mat <- cities # leave original matrix intact
cities_mat[cities <= 2300] <- 1
cities_mat[cities >= 2300] <- 0
diag(cities_mat) <- 0 # we do not have to fly within each of cities :)
cities_mat # check out the adjacency matrix
sum(cities_mat)/2 # divide by 2 because the matrix has 2 values for each edge
genes <- read.table("/Users/Cody_2/git.repos/BIS180L_web/data/voom_transform_brassica.csv", sep = ",", header = TRUE)
genes <- genes[,-c(38,42,46)] # remove questionable library columns
DE_genes <- read.table("/Users/Cody_2/git.repos/BIS180L_web/data/DEgenes_GxE.csv", sep = ",")
DE_gene_names <- rownames(DE_genes)
GxE_counts <- as.data.frame(genes[DE_gene_names,])
genes_cor <- cor(t(GxE_counts)) # calculate the correlation between all gene pairs
genes_adj <- abs(genes_cor) > 0.85
diag(genes_adj) <- 0 # important step to set edge values of genes to themselves to 0
sum(genes_adj)/2
genes_adj <- abs(genes_cor) > 0.95
diag(genes_adj) <- 0 # important step to set edge values of genes to themselves to 0
sum(genes_adj)/2
genes_cor <- cor(t(GxE_counts)) # calculate the correlation between all gene pairs
genes_adj <- abs(genes_cor) > 0.95
diag(genes_adj) <- 0 # important step to set edge values of genes to themselves to 0
sum(genes_adj)/2
genes_adj95 <- abs(genes_cor) > 0.95
diag(genes_adj95) <- 0
gene_graph95 <- graph.adjacency(genes_adj95, mode = "undirected") #convert adjacency to graph
comps <- clusters(gene_graph95)$membership                        #define gene cluster membership
colbar <- rainbow(max(comps)+1)                                   #define colors
V(gene_graph95)$color <- colbar[comps+1]                          #assign colors to nodes
plot(gene_graph95, layout = layout.fruchterman.reingold, vertex.size = 6, vertex.label = NA)
#this one will take a little while to render
genes_adj85 <- abs(genes_cor) > 0.85
diag(genes_adj85) <- 0
gene_graph85 <- graph.adjacency(genes_adj85, mode = "undirected")
comps <- clusters(gene_graph85)$membership
colbar <- rainbow(max(comps)+1)
V(gene_graph85)$color <- colbar[comps+1]
plot(gene_graph85, layout=layout.fruchterman.reingold, vertex.size=6, vertex.label=NA)
graph.density(gene_graph85)
average.path.length(gene_graph85)
cities_mat <- cities # leave original matrix intact
cities_mat[cities <= 1500] <- 1
cities_mat[cities >= 1500] <- 0
diag(cities_mat) <- 0 # we do not have to fly within each of cities :)
cities_mat # check out the adjacency matrix
graph.density(cities_mat)
cities_graph2 <- graph.adjacency(cities_mat, mode = "undirected")
graph.density(cities_graph2)
average.path.length(cities_graph2)
setwd()
libary(ibmq)
library(ibmq)
library(iBMQ)
data(sno)
data(snp)
data(gene)
head(sno)
head(snp)
str(snp)
str(gene)
PPA <- eqtlMcmc(snp, gene, n.iter = 100, burn.in = 100, n.sweep = 20, mc.cores = 6,
RIS = TRUE)
data(gene)
str(gene)
data(snppos)
data(genepos)
eqtltype <- eqtlClassifier(eqtl, snppos, genepos,1000000)
cutoff <- calculateThreshold(PPA, 0.1)
eqtl <- eqtlFinder(PPA, cutoff)
head(eqtl)
dim(eqtl)
eqtltype <- eqtlClassifier(eqtl, snppos, genepos,1000000)
hotspot <- hotspotFinder(eqtltype, 10)
?hotspotFinder
head(eqtl)
eqtltype
PPA
str(PPA)
head(eqtl)[,1:10]
head(eqtl)[1:10]
str(PPA)
cutoff <- calculateThreshold(PPA, 0.1)
eqtl <- eqtlFinder(PPA, cutoff)
head(eqtl)[1:10]
eqtltype <- eqtlClassifier(eqtl, snppos, genepos,1000000)
?hotspotFinder
hotspot <- hotspotFinder(eqtltype, 10)
eqtltype
eqtltype <- eqtlClassifier(eqtl, snppos, genepos,1000000)
head(eqtltype)
?eqtlMcmc
cutoff
dim(eqtl)
?eqtlMcmc
str(PPA)
head(PPA)
str(gene)
dim(PPA)
head(eqtl)[1:10]
dim(eqtl)
head(eqtl)
unique(eqtl$Gene)
dim(eqtl)
write.table(goldStandardMatrix, "final_exam_gene_network.csv", sep = ",")
load('~/git.repos/teaching/data/final_network.RData')
ls
ls()
library(igraph)
cities_graph2 <- graph.adjacency(final_network, mode = "undirected")
library(DREAM4)
data(dream4_100_01)
expressionData <- assays(dream4_100_01)$simulated
names(exptData(dream4_010_01))
goldStandardMatrix <- exptData(dream4_100_01)$goldStandardAdjacencyMatrix
expressionData
cities_graph2 <- graph.adjacency(goldStandardMatrix, mode = "undirected")
plot.igraph(cities_graph2)
goldStandardMatrix <- exptData(dream4_100_01)$goldStandardAdjacencyMatrix
str(goldStandardMatrix)
final_network <- goldStandardMatrix
save(final_network, file = "final_network.RData")
setwd("/Users/Cody_2/git.repos/brassica_genetic_map_paper/input")
library(qtl)
library(readxl)
?readxl
brock_blups <- read_excel("FileS1.xlsx", sheet = "GreenHouse07")
brock_blups <- read_excel("FileS1.xlsx", sheet = "Greenhouse07")
head(brock_blups)
str(brock_blups)
brock_blups <- read_excel("FileS1.xlsx", sheet = "Greenhouse07", na = "NA")
head(brock_blups)
str(brock_blups)
brock_blups$RILs <- sub("(Ind-)(\\d+)", "RIL_\\2", brock_blups$Line)
dim(brock_blups)
head(brock_blups)
brock_blups <- brock_blups[,c(14,2:13)]
head(brock_blups)
brock_blups <- read_excel("FileS1.xlsx", sheet = "Greenhouse07", na = "NA")
head(brock_blups)
str(brock_blups)
brock_blups$RIL <- sub("(Ind-)(\\d+)", "RIL_\\2", brock_blups$Line)
dim(brock_blups)
brock_blups <- brock_blups[,c(14,2:13)]
head(brock_blups)
brock_blups <- read_excel("FileS1.xlsx", sheet = "Greenhouse07", na = "NA")
head(brock_blups)
str(brock_blups)
brock_blups$RIL <- sub("(Ind-)(\\d+)", "RIL_\\2", brock_blups$Line)
dim(brock_blups)
brock_blups <- brock_blups[,c(14,3,6)]
head(brock_blups)
brock_blups <- read_excel("FileS1.xlsx", sheet = "Greenhouse07", na = "NA")
head(brock_blups)
str(brock_blups)
# name things the same as the genetic map, replace Line column with RIL
brock_blups$RILs <- sub("(Ind-)(\\d+)", "RIL_\\2", brock_blups$Line)
dim(brock_blups)
# keep two traits for remapping comparison
brock_blups <- brock_blups[,c(14,3,6)]
head(brock_blups)
brock_names <- brock_blups$RILs
brock_t <- t(brock_blups)
brock_t
brock_t <- t(brock_blups[,2:3])
brock_t
brock_t[3,] <- brock_names
brock_blups <- read_excel("FileS1.xlsx", sheet = "Greenhouse07", na = "NA")
head(brock_blups)
str(brock_blups)
# name things the same as the genetic map, replace Line column with RIL
brock_blups$RILs <- sub("(Ind-)(\\d+)", "RIL_\\2", brock_blups$Line)
dim(brock_blups)
# keep two traits for remapping comparison
brock_blups <- brock_blups[,c(3,6,14)]
head(brock_blups)
brock_t <- t(brock_blups)
brock_t
brock_t <- as.data.frame(t(brock_blups))
brock_t
row.names(brock_t)[1]
row.names(brock_t)[3]
row.names(brock_t)[3] <- paste("id")
write.table(brock_t, "brock_2010_pheno.csv", row.names = T, col.names = F, sep = ",")
snpmap <- read.delim("bin-genotypes_ref1.5_v0.1.1_tab.txt", header = TRUE, sep = "\t")
length(snpmap)
dim(snpmap)
head(snpmap)
tail(snpmap)
i <- sapply(snpmap, is.factor)
snpmap[i] <- lapply(snpmap[i], as.character)
str(snpmap)
snpmap_rqtl <- snpmap
snpmap_rqtl[snpmap_rqtl == "R500"] <- "AA"
snpmap_rqtl[snpmap_rqtl == "IMB211"] <- "BB"
snpmap_rqtl[snpmap_rqtl == "HET"] <- "AB"
test <- snpmap_rqtl
test$id <- paste(test$chr, test$bin.mid, sep = "x")
head(test)
length(test)
colnames(test)
dim(test)
str(test)
test_2 <- test[,c(129, 1, 2, 5:128)]
head(test_2)
dim(test_2)
str(test_2)
snpmap_rqtl <- test_2
snpmap_rqtl <- as.data.frame(snpmap_rqtl)
head(snpmap_rqtl)
snpmap_rqtl$bin.mid <- snpmap_rqtl$bin.mid/1000000
head(snpmap_rqtl)
names(snpmap_rqtl)[3] <- paste("")
names(snpmap_rqtl)[2] <- paste("")
head(snpmap_rqtl)
write.table(snpmap_rqtl, file= "snp_map_rqtl_Mbp_ref1.5.csv", row.names = FALSE, col.names = TRUE, sep = ",")
library(qtl)
brassica_genes <- read.cross("csvsr", genfile ="snp_map_rqtl_Mbp_ref1.5.csv",
phefile="brock_2010_pheno.csv",
genotypes=c("AA","BB"),
na.strings=c("NA","AB"))
head(brassica_genes)
summary(brassica_genes)
